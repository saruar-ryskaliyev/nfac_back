"""fix quiz_attempts column names

Revision ID: 205b9e556e16
Revises: mno345pqr678
Create Date: 2025-08-01 12:56:24.701527

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '205b9e556e16'
down_revision = 'mno345pqr678'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('options')
    # First add the column as nullable
    op.add_column('answers', sa.Column('attempt_id', sa.Integer(), nullable=True))
    
    # Handle orphaned answers by creating default quiz attempts
    op.execute("""
        -- Create default attempts for answers without quiz_attempt_id
        WITH orphaned_answers AS (
            SELECT DISTINCT a.user_id, q.quiz_id, MIN(a.created_at) as first_answer_at
            FROM answers a
            JOIN questions q ON a.question_id = q.id
            WHERE a.quiz_attempt_id IS NULL AND a.deleted_at IS NULL
            GROUP BY a.user_id, q.quiz_id
        )
        INSERT INTO quiz_attempts (user_id, quiz_id, attempt_number, started_at, completed_at, score)
        SELECT 
            user_id, 
            quiz_id, 
            1 as attempt_number,
            first_answer_at as started_at,
            first_answer_at as completed_at,
            0 as score
        FROM orphaned_answers
        ON CONFLICT (user_id, quiz_id, attempt_number) DO NOTHING;
    """)
    
    # Link orphaned answers to their new attempts
    op.execute("""
        UPDATE answers 
        SET quiz_attempt_id = qa.id
        FROM quiz_attempts qa
        JOIN questions q ON qa.quiz_id = q.quiz_id
        WHERE answers.question_id = q.id 
        AND answers.user_id = qa.user_id
        AND answers.quiz_attempt_id IS NULL
        AND answers.deleted_at IS NULL;
    """)
    
    # Populate attempt_id for existing answers based on quiz_attempt_id
    op.execute("""
        UPDATE answers 
        SET attempt_id = quiz_attempt_id 
        WHERE quiz_attempt_id IS NOT NULL
    """)
    
    # Now make it NOT NULL
    op.alter_column('answers', 'attempt_id', nullable=False)
    op.alter_column('answers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('fk_answers_quiz_attempt', 'answers', type_='foreignkey')
    op.drop_constraint('answers_user_id_fkey', 'answers', type_='foreignkey')
    op.create_foreign_key(None, 'answers', 'quiz_attempts', ['attempt_id'], ['id'], ondelete='CASCADE')
    op.drop_column('answers', 'quiz_attempt_id')
    op.drop_column('answers', 'user_id')
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('quiz_attempts', sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True))
    # Add attempt_no as nullable first
    op.add_column('quiz_attempts', sa.Column('attempt_no', sa.Integer(), nullable=True))
    
    # Populate attempt_no from attempt_number
    op.execute("""
        UPDATE quiz_attempts 
        SET attempt_no = attempt_number
    """)
    
    # Copy completed_at to finished_at  
    op.execute("""
        UPDATE quiz_attempts 
        SET finished_at = completed_at
    """)
    
    # Now make attempt_no NOT NULL
    op.alter_column('quiz_attempts', 'attempt_no', nullable=False)
    op.alter_column('quiz_attempts', 'score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               nullable=False)
    op.drop_index('ix_quiz_attempts_user_attempt', table_name='quiz_attempts')
    op.drop_index('ix_quiz_attempts_user_quiz', table_name='quiz_attempts')
    op.create_unique_constraint('uq_quiz_user_attempt', 'quiz_attempts', ['quiz_id', 'user_id', 'attempt_no'])
    op.drop_constraint('quiz_attempts_user_id_fkey', 'quiz_attempts', type_='foreignkey')
    op.drop_constraint('quiz_attempts_quiz_id_fkey', 'quiz_attempts', type_='foreignkey')
    op.create_foreign_key(None, 'quiz_attempts', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'quiz_attempts', 'quizzes', ['quiz_id'], ['id'], ondelete='CASCADE')
    op.drop_column('quiz_attempts', 'correct_answers')
    op.drop_column('quiz_attempts', 'completed_at')
    op.drop_column('quiz_attempts', 'total_questions')
    op.drop_column('quiz_attempts', 'attempt_number')
    op.alter_column('quizzes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(length=32),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=256),
               existing_nullable=False)
    op.alter_column('users', 'salt',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=256),
               existing_nullable=True)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_unique_constraint(None, 'users', ['username'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.String(length=256),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'salt',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=256),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=32),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('quizzes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('quiz_attempts', sa.Column('attempt_number', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('quiz_attempts', sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('quiz_attempts', sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('quiz_attempts', sa.Column('correct_answers', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'quiz_attempts', type_='foreignkey')
    op.drop_constraint(None, 'quiz_attempts', type_='foreignkey')
    op.create_foreign_key('quiz_attempts_quiz_id_fkey', 'quiz_attempts', 'quizzes', ['quiz_id'], ['id'])
    op.create_foreign_key('quiz_attempts_user_id_fkey', 'quiz_attempts', 'users', ['user_id'], ['id'])
    op.drop_constraint('uq_quiz_user_attempt', 'quiz_attempts', type_='unique')
    op.create_index('ix_quiz_attempts_user_quiz', 'quiz_attempts', ['user_id', 'quiz_id'], unique=False)
    op.create_index('ix_quiz_attempts_user_attempt', 'quiz_attempts', ['user_id', 'quiz_id', 'attempt_number'], unique=True)
    op.alter_column('quiz_attempts', 'score',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.drop_column('quiz_attempts', 'attempt_no')
    op.drop_column('quiz_attempts', 'finished_at')
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('answers', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('answers', sa.Column('quiz_attempt_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'answers', type_='foreignkey')
    op.create_foreign_key('answers_user_id_fkey', 'answers', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_answers_quiz_attempt', 'answers', 'quiz_attempts', ['quiz_attempt_id'], ['id'])
    op.alter_column('answers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('answers', 'attempt_id')
    op.create_table('options',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('options_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('option_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='options_question_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='options_pkey')
    )
    # ### end Alembic commands ###
